import { __decorate } from "tslib";
import { Component, Input, } from '@angular/core';
let CircleProgressbarComponent = class CircleProgressbarComponent {
    constructor() { }
    ngOnInit() { }
    ngAfterViewInit() {
        this.canvas = (document.querySelector(`.progressbar--circle#${this.progressbar.progressBarId}`));
        // drawig canvas initially
        this.drawCircle(this.canvas, this.progressbar.parentElemnent.width);
    }
    drawCircle(canvas, parentWidth) {
        // set context
        const ctx = canvas.getContext('2d');
        // canvas height width
        canvas.width = parentWidth;
        const circleRadious = this.progressbar.progressBarRadius * 2 +
            this.progressbar.baseStyles.lineWidth * 2 >
            canvas.width
            ? canvas.width / 2 - this.progressbar.baseStyles.lineWidth
            : this.progressbar.progressBarRadius;
        canvas.height = circleRadious * 2 + this.progressbar.baseStyles.lineWidth;
        // render base bar
        ctx.beginPath();
        ctx.arc(canvas.width / 2, canvas.height / 2, circleRadious, 0, 2 * Math.PI, true);
        ctx.strokeStyle = this.progressbar.baseStyles.color;
        ctx.lineWidth = this.progressbar.baseStyles.lineWidth;
        ctx.lineCap = this.progressbar.baseStyles.style;
        ctx.stroke();
        // parcentage bar
        const parcentageValue = this.progressbar.progressBarValue;
        const renderdCircleValue = (2 / 100) * parcentageValue + 1.5;
        ctx.beginPath();
        ctx.arc(canvas.width / 2, canvas.height / 2, circleRadious, 1.5 * Math.PI, renderdCircleValue * Math.PI);
        ctx.strokeStyle = this.progressbar.barStyles.color;
        ctx.lineWidth = this.progressbar.barStyles.lineWidth;
        ctx.lineCap = this.progressbar.barStyles.style;
        ctx.stroke();
        // render text
        ctx.font = `${this.progressbar.textStyles.fontSize}px ${this.progressbar.textStyles.fontFamily}`;
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        ctx.fillStyle = this.progressbar.textStyles.color;
        ctx.fillText(`${parcentageValue}%`, canvas.width / 2, canvas.height / 2 + 5);
        console.log(this.progressbar.textStyles.color);
    }
    drawCircleOnResize(parentWidth) {
        this.drawCircle(this.canvas, parentWidth);
    }
};
__decorate([
    Input()
], CircleProgressbarComponent.prototype, "progressbar", void 0);
CircleProgressbarComponent = __decorate([
    Component({
        selector: 'ngc-circle-progressbar',
        template: "<canvas\r\n  class=\"progressbar--circle\"\r\n  id=\"{{ progressbar.progressBarId }}\"\r\n></canvas>\r\n",
        styles: ["canvas{max-width:100%;vertical-align:middle}"]
    })
], CircleProgressbarComponent);
export { CircleProgressbarComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2lyY2xlLXByb2dyZXNzYmFyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nYy1wcm9ncmVzc2Jhci8iLCJzb3VyY2VzIjpbImxpYi9jaXJjbGUtcHJvZ3Jlc3NiYXIvY2lyY2xlLXByb2dyZXNzYmFyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFJVCxLQUFLLEdBRU4sTUFBTSxlQUFlLENBQUM7QUFRdkIsSUFBYSwwQkFBMEIsR0FBdkMsTUFBYSwwQkFBMEI7SUFHckMsZ0JBQWUsQ0FBQztJQUVoQixRQUFRLEtBQVUsQ0FBQztJQUNuQixlQUFlO1FBQ2IsSUFBSSxDQUFDLE1BQU0sR0FBc0IsQ0FDL0IsUUFBUSxDQUFDLGFBQWEsQ0FDcEIsd0JBQXdCLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLENBQ3pELENBQ0YsQ0FBQztRQUVGLDBCQUEwQjtRQUMxQixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUVELFVBQVUsQ0FBQyxNQUFNLEVBQUUsV0FBVztRQUM1QixjQUFjO1FBQ2QsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwQyxzQkFBc0I7UUFDdEIsTUFBTSxDQUFDLEtBQUssR0FBRyxXQUFXLENBQUM7UUFDM0IsTUFBTSxhQUFhLEdBQ2pCLElBQUksQ0FBQyxXQUFXLENBQUMsaUJBQWlCLEdBQUcsQ0FBQztZQUNwQyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxTQUFTLEdBQUcsQ0FBQztZQUMzQyxNQUFNLENBQUMsS0FBSztZQUNWLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxTQUFTO1lBQzFE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QUEwQixDQThFdEM7U0E5RVksMEJBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBDb21wb25lbnQsXHJcbiAgT25Jbml0LFxyXG4gIEFmdGVyVmlld0luaXQsXHJcbiAgT25DaGFuZ2VzLFxyXG4gIElucHV0LFxyXG4gIEhvc3RMaXN0ZW5lcixcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUHJvZ3Jlc3NiYXIgfSBmcm9tICcuLi9wcm9ncmVzc2Jhcic7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ25nYy1jaXJjbGUtcHJvZ3Jlc3NiYXInLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9jaXJjbGUtcHJvZ3Jlc3NiYXIuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL2NpcmNsZS1wcm9ncmVzc2Jhci5jb21wb25lbnQuY3NzJ10sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDaXJjbGVQcm9ncmVzc2JhckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB7XHJcbiAgQElucHV0KCkgcHJvZ3Jlc3NiYXI6IFByb2dyZXNzYmFyO1xyXG4gIGNhbnZhczogYW55O1xyXG4gIGNvbnN0cnVjdG9yKCkge31cclxuXHJcbiAgbmdPbkluaXQoKTogdm9pZCB7fVxyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgIHRoaXMuY2FudmFzID0gPEhUTUxDYW52YXNFbGVtZW50PihcclxuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgICBgLnByb2dyZXNzYmFyLS1jaXJjbGUjJHt0aGlzLnByb2dyZXNzYmFyLnByb2dyZXNzQmFySWR9YFxyXG4gICAgICApXHJcbiAgICApO1xyXG5cclxuICAgIC8vIGRyYXdpZyBjYW52YXMgaW5pdGlhbGx5XHJcbiAgICB0aGlzLmRyYXdDaXJjbGUodGhpcy5jYW52YXMsIHRoaXMucHJvZ3Jlc3NiYXIucGFyZW50RWxlbW5lbnQud2lkdGgpO1xyXG4gIH1cclxuXHJcbiAgZHJhd0NpcmNsZShjYW52YXMsIHBhcmVudFdpZHRoKSB7XHJcbiAgICAvLyBzZXQgY29udGV4dFxyXG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbiAgICAvLyBjYW52YXMgaGVpZ2h0IHdpZHRoXHJcbiAgICBjYW52YXMud2lkdGggPSBwYXJlbnRXaWR0aDtcclxuICAgIGNvbnN0IGNpcmNsZVJhZGlvdXMgPVxyXG4gICAgICB0aGlzLnByb2dyZXNzYmFyLnByb2dyZXNzQmFyUmFkaXVzICogMiArXHJcbiAgICAgICAgdGhpcy5wcm9ncmVzc2Jhci5iYXNlU3R5bGVzLmxpbmVXaWR0aCAqIDIgPlxyXG4gICAgICBjYW52YXMud2lkdGhcclxuICAgICAgICA/IGNhbnZhcy53aWR0aCAvIDIgLSB0aGlzLnByb2dyZXNzYmFyLmJhc2VTdHlsZXMubGluZVdpZHRoXHJcbiAgICAgICAgOiB0aGlzLnByb2dyZXNzYmFyLnByb2dyZXNzQmFyUmFkaXVzO1xyXG4gICAgY2FudmFzLmhlaWdodCA9IGNpcmNsZVJhZGlvdXMgKiAyICsgdGhpcy5wcm9ncmVzc2Jhci5iYXNlU3R5bGVzLmxpbmVXaWR0aDtcclxuXHJcbiAgICAvLyByZW5kZXIgYmFzZSBiYXJcclxuICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgIGN0eC5hcmMoXHJcbiAgICAgIGNhbnZhcy53aWR0aCAvIDIsXHJcbiAgICAgIGNhbnZhcy5oZWlnaHQgLyAyLFxyXG4gICAgICBjaXJjbGVSYWRpb3VzLFxyXG4gICAgICAwLFxyXG4gICAgICAyICogTWF0aC5QSSxcclxuICAgICAgdHJ1ZVxyXG4gICAgKTtcclxuICAgIGN0eC5zdHJva2VTdHlsZSA9IHRoaXMucHJvZ3Jlc3NiYXIuYmFzZVN0eWxlcy5jb2xvcjtcclxuICAgIGN0eC5saW5lV2lkdGggPSB0aGlzLnByb2dyZXNzYmFyLmJhc2VTdHlsZXMubGluZVdpZHRoO1xyXG4gICAgY3R4LmxpbmVDYXAgPSB0aGlzLnByb2dyZXNzYmFyLmJhc2VTdHlsZXMuc3R5bGU7XHJcbiAgICBjdHguc3Ryb2tlKCk7XHJcblxyXG4gICAgLy8gcGFyY2VudGFnZSBiYXJcclxuICAgIGNvbnN0IHBhcmNlbnRhZ2VWYWx1ZSA9IHRoaXMucHJvZ3Jlc3NiYXIucHJvZ3Jlc3NCYXJWYWx1ZTtcclxuICAgIGNvbnN0IHJlbmRlcmRDaXJjbGVWYWx1ZSA9ICgyIC8gMTAwKSAqIHBhcmNlbnRhZ2VWYWx1ZSArIDEuNTtcclxuXHJcbiAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICBjdHguYXJjKFxyXG4gICAgICBjYW52YXMud2lkdGggLyAyLFxyXG4gICAgICBjYW52YXMuaGVpZ2h0IC8gMixcclxuICAgICAgY2lyY2xlUmFkaW91cyxcclxuICAgICAgMS41ICogTWF0aC5QSSxcclxuICAgICAgcmVuZGVyZENpcmNsZVZhbHVlICogTWF0aC5QSVxyXG4gICAgKTtcclxuICAgIGN0eC5zdHJva2VTdHlsZSA9IHRoaXMucHJvZ3Jlc3NiYXIuYmFyU3R5bGVzLmNvbG9yO1xyXG4gICAgY3R4LmxpbmVXaWR0aCA9IHRoaXMucHJvZ3Jlc3NiYXIuYmFyU3R5bGVzLmxpbmVXaWR0aDtcclxuICAgIGN0eC5saW5lQ2FwID0gdGhpcy5wcm9ncmVzc2Jhci5iYXJTdHlsZXMuc3R5bGU7XHJcbiAgICBjdHguc3Ryb2tlKCk7XHJcblxyXG4gICAgLy8gcmVuZGVyIHRleHRcclxuICAgIGN0eC5mb250ID0gYCR7dGhpcy5wcm9ncmVzc2Jhci50ZXh0U3R5bGVzLmZvbnRTaXplfXB4ICR7dGhpcy5wcm9ncmVzc2Jhci50ZXh0U3R5bGVzLmZvbnRGYW1pbHl9YDtcclxuICAgIGN0eC50ZXh0QWxpZ24gPSAnY2VudGVyJztcclxuICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcclxuICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLnByb2dyZXNzYmFyLnRleHRTdHlsZXMuY29sb3I7XHJcbiAgICBjdHguZmlsbFRleHQoXHJcbiAgICAgIGAke3BhcmNlbnRhZ2VWYWx1ZX0lYCxcclxuICAgICAgY2FudmFzLndpZHRoIC8gMixcclxuICAgICAgY2FudmFzLmhlaWdodCAvIDIgKyA1XHJcbiAgICApO1xyXG4gICAgY29uc29sZS5sb2codGhpcy5wcm9ncmVzc2Jhci50ZXh0U3R5bGVzLmNvbG9yKTtcclxuICB9XHJcblxyXG4gIGRyYXdDaXJjbGVPblJlc2l6ZShwYXJlbnRXaWR0aCkge1xyXG4gICAgdGhpcy5kcmF3Q2lyY2xlKHRoaXMuY2FudmFzLCBwYXJlbnRXaWR0aCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==